{"version":3,"sources":["components/InputParamField.tsx","components/CheckboxField.tsx","components/ParametrsForm.tsx","components/Chart.tsx","components/App.tsx","index.tsx"],"names":["InputParamField","props","react_default","a","createElement","label","type","id","value","onChange","e","CheckboxField","idCbx","checked","ParametrsForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onAmountPointChange","event","setState","amountPoint","target","onMinYChange","minY","onMaxYChange","maxY","onGridChange","updateGridAndLabel","state","checkedGrid","checkedLabelAxis","onLabelChange","onWidthChange","width","onHeightChange","height","_this2","className","components_InputParamField","onClick","generationPoints","changeSize","components_CheckboxField","React","Component","Chart","drawChart","Number","widthSVG","heightSVG","data","points","d3","selectAll","remove","margin","xScale","scale","linear","domain","range","yScale","xAxis","svg","axis","tickSize","tickPadding","orient","yAxis","zoom","behavior","x","y","scaleExtent","on","select","attr","line","d","property","append","datum","enter","reDraw","App","amount","min","max","map","i","Math","random","chkGrid","chkLabel","components_ParametrsForm","assign","components_Chart","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.76f4caa6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface IInputParamFieldProps {\r\n  label: string;\r\n  id: string;\r\n  value: number;\r\n  onChange(event: any): void;\r\n}\r\n\r\n  const InputParamField = (props: IInputParamFieldProps)  => (\r\n  <div>\r\n      {props.label}\r\n      <input\r\n        type=\"text\"\r\n        id={props.id}\r\n        value={props.value}\r\n        onChange={ e => props.onChange(e) }\r\n      />\r\n  </div>\r\n);\r\n\r\nexport default InputParamField;","import React from \"react\";\r\n\r\ninterface ICheckboxFieldProps {\r\n    label: any;\r\n    idCbx: string;\r\n    checked: boolean;\r\n    onChange(event:any): void;\r\n}\r\n\r\nconst CheckboxField = (props:ICheckboxFieldProps) => (\r\n    <div>\r\n            {props.label} \r\n            <input \r\n                type=\"checkbox\" \r\n                id={props.idCbx} \r\n                checked={props.checked}\r\n                onChange={ e => props.onChange(e) }\r\n            /> \r\n    </div>\r\n);\r\n\r\nexport default CheckboxField;","/// <reference path=\"../interfaces.d.ts\" />\r\n\r\nimport React from \"react\";\r\nimport InputParamField from \"./InputParamField\"\r\nimport CheckboxField from \"./CheckboxField\"\r\n\r\nclass ParametrsForm extends React.Component<IParametrsFormProps, IParametrsFormState> {\r\n  constructor(props:IParametrsFormProps) {\r\n    super(props);    \r\n    this.state = {\r\n        amountPoint: this.props.amountPoint,\r\n        minY: this.props.minY,\r\n        maxY: this.props.maxY,\r\n        checkedGrid: this.props.checkedGrid,\r\n        checkedLabelAxis: this.props.checkedLabelAxis,\r\n        width: this.props.width,\r\n        height: this.props.height\r\n    }\r\n  }\r\n\r\n  onAmountPointChange = (event: any) : void => {\r\n    this.setState({\r\n      amountPoint: event.target.value\r\n    })\r\n  };\r\n\r\n  onMinYChange = (event: any) : void => {\r\n    this.setState({\r\n      minY: event.target.value\r\n    })\r\n  };\r\n\r\n  onMaxYChange = (event: any) : void => {\r\n    this.setState({\r\n      maxY: event.target.value\r\n    })\r\n  };\r\n\r\n   onGridChange = () : void => {\r\n    this.props.updateGridAndLabel(!this.state.checkedGrid,this.state.checkedLabelAxis);\r\n    this.setState({\r\n      checkedGrid: !this.state.checkedGrid\r\n    });\r\n  }\r\n\r\n  onLabelChange = () : void => {\r\n    this.props.updateGridAndLabel(this.state.checkedGrid,!this.state.checkedLabelAxis);\r\n    this.setState({\r\n      checkedLabelAxis: !this.state.checkedLabelAxis\r\n    });\r\n  }\r\n\r\n  onWidthChange = (event: any) : void => {\r\n    this.setState({\r\n      width: event.target.value\r\n    })\r\n  }\r\n\r\n  onHeightChange = (event: any) : void => {\r\n    this.setState({\r\n      height: event.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"controlPanel\">\r\n        <div className=\"area\">\r\n          <p>\r\n            <InputParamField label=\"Количество точек: \"\r\n                              id=\"countPoints\"\r\n                              value={this.state.amountPoint}\r\n                              onChange={this.onAmountPointChange} \r\n            />\r\n          </p>\r\n          <p>\r\n            <InputParamField label=\"Диапазон значений по оси Y: от \"\r\n                            id=\"minY\"\r\n                            value={this.state.minY}\r\n                            onChange={this.onMinYChange} />\r\n            <InputParamField label=\" до \"\r\n                            id=\"maxY\"\r\n                            value={this.state.maxY}\r\n                            onChange={this.onMaxYChange} />\r\n          </p>\r\n          <p>\r\n            <input type=\"button\" value=\"Сгенерировать новые точки и перестроить график\" onClick={() => { \r\n              this.props.generationPoints(this.state.amountPoint, \r\n                                    this.state.minY, \r\n                                    this.state.maxY)}} />\r\n          </p>\r\n        </div>\r\n        <div className=\"area\">\r\n          <p>\r\n            Размеры области отображения данных:\r\n          </p>\r\n          <p>\r\n            <InputParamField label=\"Ширина\"\r\n                            id=\"width\"\r\n                            value={this.state.width}\r\n                            onChange={this.onWidthChange} \r\n                            />\r\n            <InputParamField label=\"Высота\"\r\n                            id=\"height\"\r\n                            value={this.state.height}\r\n                            onChange={this.onHeightChange} \r\n                            />\r\n          </p>\r\n          <p>\r\n            <input type=\"button\" value=\"Изменить размер области отображения\" onClick={() => { \r\n              this.props.changeSize(this.state.width,\r\n                                    this.state.height,\r\n                                    )}} />\r\n          </p>\r\n        </div> \r\n        <div className=\"area\">\r\n          <p>\r\n            <CheckboxField label=\"Сетка\" \r\n                            idCbx=\"grid\" \r\n                            checked={this.state.checkedGrid} \r\n                            onChange={this.onGridChange} />\r\n            <CheckboxField label=\"Метки\" \r\n                            idCbx=\"tags\" \r\n                            checked={this.state.checkedLabelAxis} \r\n                            onChange={this.onLabelChange} />\r\n          </p>\r\n        </div> \r\n        <div className=\"area\">\r\n          <p>\r\n            * Зуммирование графика доступно по колёсику или по двойному клику на точках\r\n          </p>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default ParametrsForm;","/// <reference path=\"../interfaces.d.ts\" />\r\n\r\nimport React from \"react\";\r\n\r\ndeclare var d3: any;\r\n\r\nclass Chart extends React.Component <IAppState> {\r\n  constructor(props:IAppState) {\r\n    super(props);\r\n    this.state = {\r\n      checkedGrid : this.props.checkedGrid,\r\n      checkedLabelAxis: this.props.checkedLabelAxis\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.props.reDraw) {\r\n      this.drawChart();\r\n    }  \r\n\r\n    if (this.props.checkedGrid) {\r\n      d3.selectAll(\" .tick line\").attr(\"display\", \"block\");\r\n    } else {\r\n      d3.selectAll(\" .tick line\").attr(\"display\", \"none\");\r\n    }\r\n    if (this.props.checkedLabelAxis) {\r\n      d3.selectAll(\".axis text\").attr(\"display\", \"block\");\r\n\r\n    } else {\r\n      d3.selectAll(\".axis text\").attr(\"display\", \"none\");\r\n    }\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n            <svg id=\"svg\">\r\n            </svg>\r\n    );\r\n  }\r\n\r\n  drawChart = () => {   \r\n    const amountPoint : number = Number(this.props.amountPoint);\r\n    const minY : number = Number(this.props.minY);\r\n    const maxY : number = Number(this.props.maxY);\r\n    const widthSVG : number = Number(this.props.width);\r\n    const heightSVG : number = Number(this.props.height);\r\n    let data: point[] = this.props.points;\r\n\r\n    //************************************************************\r\n    // Очистка SVG\r\n    //************************************************************\r\n    d3.selectAll(\"svg > *\").remove();\r\n\r\n    //************************************************************\r\n    // Создание осей и отступов и подключение функции зуммирования\r\n    //************************************************************\r\n    let margin : {top: number; right: number; bottom: number; left: number} = \r\n                        {top: 20, right: 10, bottom: 30, left: 50}, \r\n    width : number = widthSVG- margin.left - margin.right,\r\n    height : number = heightSVG - margin.top - margin.bottom; \r\n\r\n    let xScale : any = d3.scale.linear()\r\n    .domain([0, amountPoint+1])\r\n    .range([0, width]);\r\n\r\n    let yScale : any = d3.scale.linear()\r\n    .domain([minY-5, maxY+5])\r\n    .range([height, 0]);\r\n\r\n    let xAxis : any = d3.svg.axis()\r\n    .scale(xScale)\r\n    .tickSize(-height)\r\n    .tickPadding(10)\t\r\n    .orient(\"bottom\");\t  \r\n\r\n    let yAxis : any = d3.svg.axis()\r\n    .scale(yScale)\r\n    .tickPadding(10)\r\n    .tickSize(-width)\r\n    .orient(\"left\");\r\n\r\n    let zoom : any = d3.behavior.zoom()\r\n    .x(xScale)\r\n    .y(yScale)\r\n    .scaleExtent([1, 10])\r\n    .on(\"zoom\", zoomed);     \r\n\r\n    //************************************************************\r\n    // Создание SVG-объекта\r\n    //************************************************************\t\r\n    let svg : any = d3.select(\"svg\")\r\n    .call(zoom)\r\n    .attr(\"width\", width + margin.left + margin.right)\r\n    .attr(\"height\", height + margin.top + margin.bottom)\r\n    .append(\"g\")\r\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n    svg.append(\"g\")\r\n    .attr(\"class\", \"x axis\")\r\n    .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n    .call(xAxis);\r\n\r\n    svg.append(\"g\")\r\n    .attr(\"class\", \"y axis\")\r\n    .call(yAxis);\r\n\r\n    svg.append(\"clipPath\")\r\n    .attr(\"id\", \"clip\")\r\n    .append(\"rect\")\r\n    .attr(\"width\", width)\r\n    .attr(\"height\", height);\r\n\r\n    //************************************************************\r\n    // Рисование line-объекта с данными на SVG\r\n    //************************************************************\r\n    let line : any = d3.svg.line()\r\n    .x(function(d:point) {return xScale(d.x); })\r\n    .y(function(d:point) { return yScale(d.y); })\r\n\r\n    svg.append(\"path\")\r\n    .datum(data)\r\n    .attr(\"class\", \"line\")\r\n    .attr(\"clip-path\", \"url(#clip)\")\r\n    .attr('stroke', 'steelblue')\r\n    .attr(\"d\", line);\t\r\n\r\n    //************************************************************\r\n    // Рисование точек\r\n    //************************************************************\r\n    let points = svg.selectAll('.dots')\r\n    .data([data])\r\n    .enter()\r\n    .append(\"g\")\r\n    .attr(\"class\", \"dots\")\r\n    .attr(\"clip-path\", \"url(#clip)\");\t\r\n\r\n    points.selectAll('.dot')\r\n    .data(data)\r\n    .enter()\r\n    .append('circle')\r\n    .attr('class','dot')\r\n    .attr(\"r\", 2.5)\r\n    .attr('fill', \"black\")\t\r\n    .attr(\"transform\", function(d:point) { \r\n      return \"translate(\" + xScale(d.x) + \",\" + yScale(d.y) + \")\"; }\r\n    );   \r\n\r\n    //************************************************************\r\n    // Функция зуммирования\r\n    //************************************************************\r\n\r\n    function zoomed() : void {\r\n      svg.select(\".x.axis\").call(xAxis);\r\n      svg.select(\".y.axis\").call(yAxis);   \r\n      svg.selectAll('path.line').attr('d', line);  \r\n     \r\n      points.selectAll('circle').attr(\"transform\", function(d:any) { \r\n        return \"translate(\" + xScale(d.x) + \",\" + yScale(d.y) + \")\"; }\r\n      );  \r\n\r\n      // добавление и удаление сетки и меток\r\n      if (d3.select(\"#grid\").property(\"checked\")) {\r\n        d3.selectAll(\" .tick line\").attr(\"display\", \"block\");\r\n      } else {\r\n        d3.selectAll(\" .tick line\").attr(\"display\", \"none\");\r\n      }\r\n      if (d3.select(\"#tags\").property(\"checked\")) {\r\n        d3.selectAll(\".axis text\").attr(\"display\", \"block\");\r\n      } else {\r\n        d3.selectAll(\".axis text\").attr(\"display\", \"none\");\r\n      }\r\n    }   \r\n  }\r\n}\r\n\r\nexport default Chart;","/// <reference path=\"../interfaces.d.ts\" />\r\n\r\nimport React from \"react\";\r\nimport ParametrsForm from \"./ParametrsForm\"\r\nimport Chart from \"./Chart\"\r\n\r\ndeclare var d3: any;\r\n\r\nclass App extends React.Component<any, IAppState> {\r\n  constructor(props:any) {\r\n    super(props);\r\n    this.state = {\r\n      amountPoint: 21,\r\n      minY: 5,\r\n      maxY: 75,\r\n      checkedGrid: true,\r\n      checkedLabelAxis: true,\r\n      reDraw: false,\r\n      points: [],\r\n      width: 960,\r\n      height: 500\r\n      };\r\n  };\r\n\r\n  // Первоначальная вырисовка графика\r\n  componentDidMount() {\r\n    this.generationPoints(this.state.amountPoint, this.state.minY, this.state.maxY);\r\n  };\r\n\r\n  generationPoints = (amount:number, minY:number, maxY:number): void => {\r\n    const min : number = Number(minY);\r\n    const max : number = Number(maxY);\r\n\r\n    let data : point[] = d3.range(amount).map(function(i:number) { return {\"x\": i+1, \"y\": (Math.random() * (max - min) + min)} })\r\n\r\n    this.setState({\r\n      points: data,\r\n      amountPoint: amount,\r\n      minY: min,\r\n      maxY: max,\r\n      reDraw: true\r\n    })\r\n  };\r\n\r\n  changeSize = (width:number, height:number) : void => {\r\n    this.setState({ \r\n      width: width,\r\n      height: height,\r\n      reDraw: true\r\n    })\r\n };\r\n\r\n  updateGridAndLabel = (chkGrid:boolean, chkLabel:boolean) : void => {\r\n    this.setState({ \r\n      checkedGrid: chkGrid,\r\n      checkedLabelAxis: chkLabel,\r\n      reDraw: false\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      <h1>Визуализация линейной диаграммы на рандомно сгенерированных данных</h1>\r\n      <ParametrsForm changeSize={this.changeSize} \r\n                    generationPoints={this.generationPoints}\r\n                    updateGridAndLabel={this.updateGridAndLabel}\r\n                    {... this.state}\r\n      />\r\n      <Chart {... this.state} />\r\n    </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\"\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}