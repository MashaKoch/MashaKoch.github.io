{"version":3,"sources":["components/InputParamField.tsx","components/CheckboxField.tsx","components/ParametrsForm.tsx","components/Chart.tsx","components/App.tsx","index.tsx"],"names":["InputParamField","props","react_default","a","createElement","label","type","id","value","onChange","e","CheckboxField","idCbx","checked","ParametrsForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onAmountPointChange","event","setState","amountPoint","target","onMinXChange","minX","onMaxXChange","maxX","onMinYChange","minY","onMaxYChange","maxY","onGridChange","updateGridAndLabel","state","checkedGrid","checkedLabelAxis","onLabelChange","_this2","components_InputParamField","components_CheckboxField","onClick","updateData","React","Component","Chart","drawChart","Number","getRandomArbitrary","min","max","Math","random","x","y","i","push","sort","d3","ascending","data","selectAll","remove","select","datum","width","height","xlabel","ylabel","selection","each","datasets","margin","top","right","bottom","left","innerwidth","innerheight","x_scale","scale","linear","range","domain","y_scale","x_axis","svg","axis","orient","y_axis","x_grid","tickSize","tickFormat","y_grid","draw_line","line","d","attr","append","style","text","zip","enter","data_lines","map","d3_xy_chart","reDraw","App","amount","valMinX","valMaxX","valMinY","valMaxY","chkGrid","chkLabel","components_ParametrsForm","assign","components_Chart","ReactDOM","render","components_App","document","getElementById"],"mappings":"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","file":"static/js/main.ce671415.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ninterface IInputParamFieldProps {\r\n  label: string;\r\n  id: string;\r\n  value: number;\r\n  onChange(event: any): void;\r\n}\r\n\r\n  const InputParamField = (props: IInputParamFieldProps)  => (\r\n  <div>\r\n      {props.label}\r\n      <input\r\n        type=\"text\"\r\n        id={props.id}\r\n        value={props.value}\r\n        onChange={ e => props.onChange(e) }\r\n      />\r\n  </div>\r\n);\r\n\r\nexport default InputParamField;","import React from \"react\";\r\n\r\ninterface ICheckboxFieldProps {\r\n    label: any;\r\n    idCbx: string;\r\n    checked: boolean;\r\n    onChange(event:any): void;\r\n}\r\n\r\nconst CheckboxField = (props:ICheckboxFieldProps) => (\r\n    <div>\r\n            {props.label} \r\n            <input \r\n                type=\"checkbox\" \r\n                id={props.idCbx} \r\n                checked={props.checked}\r\n                onChange={ e => props.onChange(e) }\r\n            /> \r\n    </div>\r\n);\r\n\r\nexport default CheckboxField;","/// <reference path=\"../interfaces.d.ts\" />\r\n\r\nimport React from \"react\";\r\nimport InputParamField from \"./InputParamField\"\r\nimport CheckboxField from \"./CheckboxField\"\r\n\r\nclass ParametrsForm extends React.Component<IParametrsFormProps, IParametrsFormState> {\r\n  constructor(props:IParametrsFormProps) {\r\n    super(props);    \r\n    this.state = {\r\n        amountPoint: this.props.amountPoint,\r\n        minX: this.props.minX,\r\n        maxX: this.props.maxX,\r\n        minY: this.props.minY,\r\n        maxY: this.props.maxY,\r\n        checkedGrid: this.props.checkedGrid,\r\n        checkedLabelAxis: this.props.checkedLabelAxis\r\n    }\r\n  }\r\n\r\n  onAmountPointChange = (event: any) : void => {\r\n    this.setState({\r\n      amountPoint: event.target.value\r\n    })\r\n  };\r\n\r\n  onMinXChange = (event: any) : void => {\r\n    this.setState({\r\n      minX: event.target.value\r\n    })\r\n  };\r\n\r\n  onMaxXChange = (event: any) : void => {\r\n    this.setState({\r\n      maxX: event.target.value\r\n    })\r\n  };\r\n\r\n  onMinYChange = (event: any) : void => {\r\n    this.setState({\r\n      minY: event.target.value\r\n    })\r\n  };\r\n\r\n  onMaxYChange = (event: any) : void => {\r\n    this.setState({\r\n      maxY: event.target.value\r\n    })\r\n  };\r\n\r\n   onGridChange = () : void => {\r\n    this.props.updateGridAndLabel(!this.state.checkedGrid,this.state.checkedLabelAxis);\r\n    this.setState({\r\n      checkedGrid: !this.state.checkedGrid\r\n    });\r\n  }\r\n\r\n  onLabelChange = () : void => {\r\n    this.props.updateGridAndLabel(this.state.checkedGrid,!this.state.checkedLabelAxis);\r\n    this.setState({\r\n      checkedLabelAxis: !this.state.checkedLabelAxis\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"controlPanel\">\r\n        <p>\r\n          <InputParamField label=\"Количество точек: \"\r\n                            id=\"countPoints\"\r\n                            value={this.state.amountPoint}\r\n                            onChange={this.onAmountPointChange} \r\n          />\r\n        </p>\r\n        <p>\r\n          <InputParamField label=\"Диапазон начений по оси X: от \"\r\n                          id=\"minX\"\r\n                          value={this.state.minX}\r\n                          onChange={this.onMinXChange} />\r\n          <InputParamField label=\" до \"\r\n                          id=\"maxX\"\r\n                          value={this.state.maxX}\r\n                          onChange={this.onMaxXChange} />\r\n        </p>\r\n        <p>\r\n          <InputParamField label=\"Диапазон начений по оси Y: от \"\r\n                          id=\"minY\"\r\n                          value={this.state.minY}\r\n                          onChange={this.onMinYChange} />\r\n          <InputParamField label=\" до \"\r\n                          id=\"maxY\"\r\n                          value={this.state.maxY}\r\n                          onChange={this.onMaxYChange} />\r\n        </p>\r\n        <p>\r\n          <CheckboxField label=\"Сетка\" \r\n                          idCbx=\"grid\" \r\n                          checked={this.state.checkedGrid} \r\n                          onChange={this.onGridChange} />\r\n          <CheckboxField label=\"Метки\" \r\n                          idCbx=\"tags\" \r\n                          checked={this.state.checkedLabelAxis} \r\n                          onChange={this.onLabelChange} />\r\n        </p>\r\n        <p>\r\n          <input type=\"button\" value=\"Перестроить график\" onClick={() => { \r\n            this.props.updateData(this.state.amountPoint, \r\n                                  this.state.minX, \r\n                                  this.state.maxX, \r\n                                  this.state.minY, \r\n                                  this.state.maxY, \r\n                                  this.state.checkedGrid,\r\n                                  this.state.checkedLabelAxis)}} />\r\n        </p>\r\n      </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default ParametrsForm;","/// <reference path=\"../interfaces.d.ts\" />\r\n\r\nimport React from \"react\";\r\n\r\ndeclare var d3: any;\r\n\r\nclass Chart extends React.Component <IAppState> {\r\n  constructor(props:IAppState) {\r\n    super(props);\r\n  }\r\n\r\n  // Первоначальная вырисовка графика\r\n  componentDidMount() {\r\n    this.drawChart();\r\n  };\r\n\r\n  // Перерисовка графика после обновления компонента по условию либо отображение меток и сетки\r\n  componentDidUpdate() {\r\n    if (this.props.reDraw) {\r\n      this.drawChart();\r\n    } \r\n\r\n    if (this.props.checkedGrid) {\r\n      d3.selectAll(\".grid .tick line\").attr(\"display\", \"block\");\r\n    } else {\r\n      d3.selectAll(\".grid .tick line\").attr(\"display\", \"none\");\r\n    }\r\n    if (this.props.checkedLabelAxis) {\r\n      d3.selectAll(\".axis text\").attr(\"display\", \"block\");\r\n    } else {\r\n      d3.selectAll(\".axis text\").attr(\"display\", \"none\");\r\n    }\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n            <svg id=\"svg\">\r\n            </svg>\r\n    );\r\n  }\r\n\r\n\r\n  drawChart = () => {   \r\n    const amountPoint : number = Number(this.props.amountPoint);\r\n    const minX : number = Number(this.props.minX);\r\n    const maxX : number = Number(this.props.maxX);\r\n    const minY : number = Number(this.props.minY);\r\n    const maxY : number = Number(this.props.maxY);\r\n\r\n    function getRandomArbitrary(min:number, max:number) : number {\r\n      return (Math.random() * (max - min) + min);\r\n    }\r\n\r\n    let x: number[] = [];\r\n    let y: number[] = []; \r\n    \r\n    for(let i=0; i<amountPoint; i++) {\r\n        x.push(getRandomArbitrary(minX,maxX));\r\n        y.push(getRandomArbitrary(minY,maxY))\r\n    }    \r\n\r\n    x.sort(d3.ascending);\r\n    \r\n    let data : {x: number[], y: number[]}[] = [{x: x, y: y}];\r\n\r\n    d3.selectAll(\"svg > *\").remove();\r\n\r\n    d3.select(\"svg\")\r\n        .datum(data)\r\n        .call(d3_xy_chart());\r\n\r\n    function d3_xy_chart() : any {\r\n      let width : number = 960,  \r\n          height : number = 500, \r\n          xlabel : string = \"X Axis\",\r\n          ylabel : string = \"Y Axis\" ;\r\n      \r\n      function chart(selection:any) : void {\r\n        selection.each(function(datasets: any) {\r\n          let margin : {top: number; right: number; bottom: number; left: number} = \r\n                        {top: 20, right: 80, bottom: 30, left: 50}, \r\n              innerwidth: number = width - margin.left - margin.right,\r\n              innerheight: number = height - margin.top - margin.bottom ;\r\n          \r\n          let x_scale: any = d3.scale.linear()\r\n              .range([0, innerwidth])\r\n              .domain([minX, maxX]);\r\n\r\n          let y_scale: any = d3.scale.linear()\r\n              .range([innerheight, 0])\r\n              .domain([minY, maxY]);\r\n                      \r\n          let color_scale : string= \"#1f77b4\";\r\n\r\n          let x_axis: any = d3.svg.axis()\r\n              .scale(x_scale)\r\n              .orient(\"bottom\") ;\r\n\r\n          let y_axis: any = d3.svg.axis()\r\n              .scale(y_scale)\r\n              .orient(\"left\") ;\r\n\r\n          let x_grid: any = d3.svg.axis()\r\n              .scale(x_scale)\r\n              .orient(\"bottom\")\r\n              .tickSize(-innerheight)\r\n              .tickFormat(\"\") ;\r\n\r\n          let y_grid: any = d3.svg.axis()\r\n              .scale(y_scale)\r\n              .orient(\"left\") \r\n              .tickSize(-innerwidth)\r\n              .tickFormat(\"\") ;\r\n\r\n          let draw_line: any = d3.svg.line()\r\n              .x(function(d: any): number { return x_scale(d[0]); })\r\n              .y(function(d: any): number { return y_scale(d[1]); }) ;\r\n\r\n          let svg: any = d3.select(\"svg\")\r\n              .attr(\"width\", width)\r\n              .attr(\"height\", height)\r\n              .append(\"g\")\r\n              .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n          // Сетка и метки\r\n          svg.append(\"g\")\r\n              .attr(\"class\", \"x grid\")\r\n              .attr(\"transform\", \"translate(0,\" + innerheight + \")\")\r\n              .call(x_grid) ;\r\n\r\n          svg.append(\"g\")\r\n              .attr(\"class\", \"y grid\")\r\n              .call(y_grid) ;\r\n\r\n          svg.append(\"g\")\r\n              .attr(\"class\", \"x axis\")\r\n              .attr(\"transform\", \"translate(0,\" + innerheight + \")\") \r\n              .call(x_axis)\r\n              .append(\"text\")\r\n              .attr(\"dy\", \"-.71em\")\r\n              .attr(\"x\", innerwidth)\r\n              .style(\"text-anchor\", \"end\")\r\n              .text(xlabel) ;\r\n          \r\n          svg.append(\"g\")\r\n              .attr(\"class\", \"y axis\")\r\n              .call(y_axis)\r\n              .append(\"text\")\r\n              .attr(\"transform\", \"rotate(-90)\")\r\n              .attr(\"y\", 6)\r\n              .attr(\"dy\", \"0.71em\")\r\n              .style(\"text-anchor\", \"end\")\r\n              .text(ylabel) ;\r\n\r\n          // Точки\r\n          svg.append(\"g\").selectAll(\".dot\")\r\n              .data(d3.zip(data[0].x, data[0].y))\r\n              .enter().append(\"circle\")\r\n              .attr(\"class\", \"dot\")\r\n              .attr(\"r\", 3.5)\r\n              .attr(\"cx\", function(d: any):number { return x_scale(d[0]) })\r\n              .attr(\"cy\", function(d: any):number { return y_scale(d[1]) })                        \r\n\r\n          // График\r\n          let data_lines: any = svg.selectAll(\".d3_xy_chart_line\")\r\n              .data(datasets.map(function(d: any) {    \r\n                  return d3.zip(d.x, d.y);}))\r\n              .enter().append(\"g\")\r\n              .attr(\"class\", \"d3_xy_chart_line\") ;\r\n          \r\n          data_lines.append(\"path\")\r\n              .attr(\"class\", \"line\")\r\n              .attr(\"d\", function(d: any) {\r\n                  return draw_line(d); })\r\n              .attr(\"stroke\", color_scale) ;  \r\n      }) ;\r\n    }\r\n    return chart;\r\n    }         \r\n  }\r\n}\r\n\r\nexport default Chart;","/// <reference path=\"../interfaces.d.ts\" />\r\n\r\nimport React from \"react\";\r\nimport ParametrsForm from \"./ParametrsForm\"\r\nimport Chart from \"./Chart\"\r\n\r\nclass App extends React.Component<any, IAppState> {\r\n  constructor(props:any) {\r\n    super(props);\r\n        this.state = {\r\n          amountPoint: 20,\r\n          minX: 0,\r\n          maxX: 50,\r\n          minY: 0,\r\n          maxY: 50,\r\n          checkedGrid: true,\r\n          checkedLabelAxis: true,\r\n          reDraw: false\r\n          };\r\n  }\r\n\r\n  updateData = (amount:number, valMinX:number, valMaxX:number, valMinY:number, valMaxY:number, chkGrid:boolean, chkLabel:boolean) : void => {\r\n    this.setState({ \r\n      amountPoint: amount,\r\n      minX: valMinX,\r\n      maxX: valMaxX,\r\n      minY: valMinY,\r\n      maxY: valMaxY,\r\n      reDraw: true\r\n    })\r\n };\r\n\r\n  updateGridAndLabel = (chkGrid:boolean, chkLabel:boolean) : void => {\r\n    this.setState({ \r\n      checkedGrid: chkGrid,\r\n      checkedLabelAxis: chkLabel,\r\n      reDraw: false\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return (\r\n    <div>\r\n      <h1>Визуализация линейной диаграммы на рандомно сгенерированных данных</h1>\r\n      <ParametrsForm updateData={this.updateData} \r\n                    updateGridAndLabel={this.updateGridAndLabel}\r\n                    {... this.state}\r\n      />\r\n      <Chart {... this.state} />\r\n    </div>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./components/App\"\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}